package com.scala.grammar

/**
  * Scala 中函数为头等公民，你不仅可以定义一个函数然后调用它，而且你可以写一个未命名的函数字面量，然后可以把它当成一个值传递到其它函数或是赋值给其它变量
  */
class FunctionDemo {

    // 匿名函数
    // 这是个函数字面量，它的功能为+1. 符好 => 表示这个函数将符号左边的东西（本例为一个整数），转换成符号右边的东西（加 1）。
    // 函数字面量为一个对象（就像 3 是个对象），因此如果你愿意的话，可以把这个函数字面量保存在一个变量中。
    // 调用该函数的时候，直接调用变量名称即可
    var increase = (x :Int ) => x +1
    // increase: Int => Int = <function1>
    // 注意函数字面量 (x:Int) => x + 1 的类型为，它在 Scala 内部表示为带有一个参数的类 Function1 的一个对象，
    // 其它如 FunctionN 代表带有N个参数的函数，Function0 代表不含参数的函数类型。

    // Scala 提供了多种方法来简化函数字面量中多余的部分，比如前面例子中 filter 方法中使用的函数字面量,完整的写法如下：
    (x: Int) => x + 1
    // 首先可以省略到参数的类型，Scala 可以根据上下文推算出参数的类型，函数定义可以简化为：
    // (x) => x + 1
    // 这个函数可以进一步去掉参数的括号，这里的括号不起什么作用：
    // x => x + 1
    // Scala 还可以进一步简化，Scala 允许使用“占位符”下划线”_”来替代一个或多个参数，只要这个参数值函数定义中只出现一次，Scala编译器可以推断出参数。比如：
    val someNumbers = List ( -11, -10, - 5, 0, 5, 10)
    // 过滤出参数大于0的，_可以表示一个或者多个参数
    someNumbers.filter(_ > 0)
    // 因此这里的“_” 代表了 Println 的整个参数列表，而不仅仅替代单个参数。当你采用这种方法使用“_”，你就创建了一个部分应用的函数(partially applied function)。
    // 在 Scala 中，当你调用函数，传入所需参数，你就把函数“应用”到参数。
    val sum = (_: Int) + (_: Int) + (_: Int)
    // 一个部分应用的函数指的是你在调用函数时，不指定函数所需的所有参数，
    // 这样你就创建了一个新的函数，这个新的函数就称为原始函数的部分应用函数，比如说我们固定 sum 的第一和第三个参数，定义如下的部分应用函数：
    val b = sum ( 1 , _ :Int, 3)
    // 变量b的类型为函数<Function1>
    // 一个方法也可以转化成部分应用函数
    // 一个方法转换成函数：方法名称_  即可

}

object FunctionDemo {

    def main(args: Array[String]): Unit = {
        println(new FunctionDemo().increase(10))
    }

}
